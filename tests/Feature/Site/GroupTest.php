<?php

namespace Tests\Feature\Site;

use App\Models\Group;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class GroupTest extends TestCase
{
    private $user, $groupData, $groupErrorData;
    /**
     * A basic feature test example.
     *
     * @return void
     */

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        Group::factory()->create([
            'id' => 1
        ]);

        $this->user = User::factory()->create([
           'id' => 1
        ]);

        $this->groupData = [
          'name' => "testTest",
          'available' => 1
        ];

        $this->groupErrorData = [
            'name' => "./??<<ąę",
            'available' => "./fsd"
        ];

    }

    public function testGroupIndexDontLogin()
    {
        $response = $this->get(route('group.index'));

        $response->assertStatus(302)
            ->assertRedirect(route('login'));
    }

    public function testGroupUpdateDontLogin()
    {
        $response = $this->post(route('group.update', [
            'id' => 1
        ]), $this->groupData);

        $response->assertStatus(302)
            ->assertRedirect(route('login'));
    }

    public function testGroupCreateDontLogin()
    {
        $response = $this->post(route('group.create'), $this->groupData);

        $response->assertStatus(302)
            ->assertRedirect(route('login'));
    }
    public function testGroupShowDontLogin()
    {
        $response = $this->get(route('group.show', [
            'id' => 1
        ]));

        $response->assertStatus(302)
        ->assertRedirect(route('login'));
    }
    public function testGroupEditDontLogin()
    {
        $response = $this->get(route('group.edit', [
            'id' => 1
        ]));

        $response->assertStatus(302)
            ->assertRedirect(route('login'));
    }

    public function testGroupIndex()
    {
        $response = $this->actingAs($this->user)
            ->get(route('group.index'));

        $response->assertStatus(200);
    }
    public function testGroupShow()
    {
        $response = $this->actingAs($this->user)
            ->get(route('group.show', [
            'id' => 1
        ]));

        $response->assertStatus(200);
    }
    public function testGroupEdit()
    {
        $response = $this->actingAs($this->user)
            ->get(route('group.edit', [
            'id' => 1
        ]));

        $response->assertStatus(200);
    }


    public function testUpdateWithErrorData() {
        $result = $this->actingAs($this->user)
            ->post(route('group.update', [
            'id' => 1
            ]), $this->groupErrorData);

        $result->assertStatus(302)
            ->assertSessionHasErrors([
               'name',
                'available'
            ]);
    }
    public function testUpdateWithCorrectData() {
        $result = $this->actingAs($this->user)
            ->post(route('group.update', [
            'id' => 1
            ]), $this->groupData);

        $this->assertDatabaseHas('groups', $this->groupData);
        $result->assertStatus(302)
            ->assertSessionHasNoErrors();
    }

    public function testCreateWithErrorData() {
        $result = $this->actingAs($this->user)
            ->post(route('group.create'), $this->groupErrorData);

        $result->assertStatus(302)
            ->assertSessionHasErrors([
               'name',
                'available'
            ]);
    }
    public function testCreateWithCorrectData() {
        $result = $this->actingAs($this->user)
            ->post(route('group.create'), $this->groupData);

        $this->assertDatabaseHas('groups', $this->groupData);
        $result->assertStatus(302)
            ->assertSessionHasNoErrors()
            ->assertRedirect(route('group.show', [
                'id' => 2
            ]));
    }
}
