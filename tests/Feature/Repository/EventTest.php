<?php
declare(strict_types=1);
namespace Repository;

use App\Models\Event;
use App\Repository\Eloquent\EventRepository;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class EventTest extends TestCase
{
    use DatabaseMigrations, RefreshDatabase;
    private $eventData, $repository, $eventUpdate;
    /**
     * A basic feature test example.
     *
     * @return void
     */

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $events = Event::factory()->create([
            'id' => 1
        ]);
        $this->repository = new EventRepository($events);
        $this->eventData = [
            'date' => "12-12-1222",
            'hour' => "15:00",
            'user_id' => 1,
            'status_id' => 1,
            'description' => 'test',
        ];
        $this->eventUpdate = [
            'id' => 1,
            'date' => "12-12-1222",
            'hour' => "15:00",
            'description' => 'test',
        ];
    }

    public function testFindEvent()
    {
       $event = $this->repository->findOrFail(1);

       $this->assertFalse(empty($event));
    }

    public function testCreateEvent()
    {
       $result = $this->repository->create($this->eventData);

       $this->assertDatabaseHas('events', $this->eventData);
        $this->assertArrayHasKey('id', $result);
        $this->assertArrayHasKey('user_id', $result);
        $this->assertArrayHasKey('status_id', $result);

    }

    public function testUpdateEvent()
    {
       $this->repository->update($this->eventUpdate, 1);

       $this->assertDatabaseHas('events', $this->eventUpdate);
    }

    public function testDestroyEvent()
    {
        $this->repository->destroy(1);

        $this->assertDatabaseMissing('events', [
           'id' => 1
        ]);
    }

    public function testGetEvent()
    {
        $event = $this->repository->get();

        $countOne = count($event) === 1;

        $this->assertTrue($countOne);
    }
}
